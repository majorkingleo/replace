/**
 * Low-Level functions for H1/TCP.
 * @file
 * @author Copyright (c) 2005 Salomon Automation GmbH
 */

#include <sys/types.h>
#include <sys/socket.h>
#include <fcntl.h>
#ifndef  _WIN32
#include <netinet/in.h>
#include <netinet/tcp.h>
#include <arpa/inet.h>
#endif // _WIN32
#include <stdio.h>
#include <ctype.h>
#include <tsleep.h>
#include <string.h>
#include <stdlib.h>
#include <stddef.h>
#include <time.h>
#include <netdb.h>
#include <unistd.h>
#include <signal.h>
#include <errno.h>
#include <malloc.h>
#include <logtool.h>

#include "h1tcp.h"

#define MAX_TELE_LEN	1024


#undef __rcv__log__
#undef __snd__log__
#undef __trace__log__
#undef __debug__log__

#define __TCP_NODELAY__

typedef struct _osi_head {
	u_char	version;
	u_char	res1;
	u_char	tpkt_len[2];
	u_char	head_len;
} osi_head;

typedef struct _osi_conn {
	osi_head	oh;
	u_char		code;
	u_char		dst_ref[2];
	u_char		src_ref[2];
	u_char		tp_class;
	/*
	 * conn data
	 */
} osi_conn;

typedef struct _osi_data {
	osi_head	oh;
	u_char		code;
	u_char		last;
	/*
	 * data (rw_head, ...)
	 */
} osi_data;

#define FAC_H1TCP 	"h1tcp"


#define H1TCP_VERS	0x03
#define SRC_REF		0xffff
#define DST_REF		0x0000

#define CODE_CR		0xe0		/* Connection Request */
#define CODE_CC		0xd0		/* Connection Confirmation */
#define CODE_DT		0xf0		/* Data Transfer */
#define CODE_DR		0x80		/* Disconnect Request */

#define PARA_TPDU	0xc0
#define PARA_LTSAP	0xc1
#define PARA_RTSAP	0xc2

#define ISLAST		0x80
#define NOTLAST		0x00

#define POW_PDU		9
#define MAX_PDU		512		/* MAX_PDU = 2 ^ POW_PDU */

#define RW_HEAD_LEN	16
#define OSI_HEAD_LEN sizeof(osi_head)
#define BUFSZ		(MAX_TELE_LEN+RW_HEAD_LEN+OSI_HEAD_LEN+100)

#define WRITE_QVZ	10		/* [s] */
#define CONNECT_TO	10		/* [s] */
#define RCV_BVZ		1000	/* [ms] */

#define WAITTIME            180
#define WAITTIMEAFTERTELE   50
#define BLOCKVZTIME         300

typedef struct _h1tcp_data {
	int		s;
	int		max_pdu;
	time_t	snd_time;			/* fuer QVZ write */
	u_char	frag_buf[BUFSZ];
	int		frag_idx;
	u_char	r_buf[BUFSZ];
	int		r_idx;
	struct sockaddr_in	peeraddr_in;
} h1tcp_data;

static h1tcp_data	*p_h1tcp_data = NULL;
static int			phd_idx;

/* ------------------------------------------------------------
 * Telegramme senden ...
 */
static int
h1tcp_snd_sock(h1tcp_data *phd, u_char *buf, int len)
{
	int		rv;

#ifdef __snd__log__
	int		i;
	char	*pc;
	char	trc_buf[3*BUFSZ + 50];
	
	pc = trc_buf;
	for(i=0; i<len; ++i) {
		if (i % 25 == 0)
			pc += sprintf(pc, "\n");
		pc += sprintf(pc, " %02x", buf[i]);
	}

	LogPrintf(FAC_H1TCP, LT_TRACE, "send_trace: %s", trc_buf);
#endif

#ifdef CYGWIN
	rv = send(phd->s,buf, len, MSG_DONTROUTE);
#else
	rv = sendto(phd->s, (char *)buf, len, 0, NULL, 0);
#endif
	if (rv != len) {
		LogPrintf(FAC_H1TCP, LT_ALERT,
			"send %d: len=%d errno=%d strerror=%s",
			phd->s, len, errno, strerror(errno));
		rv = -1;
	}
	return rv;
}


int
h1tcp_snd_send(int s, u_char *buf, int len)
{
	int			rv, slen, idx;
	int			first;
	u_char		*pc;
	u_char		sbuf[BUFSZ];
	osi_data	*pod;
	h1tcp_data	*phd;

#ifdef __debug__log__
	LogPrintf(FAC_H1TCP, LT_DEBUG,
		"h1tcp_snd_send:  s = %d, len = %d ... ", s, len);
#endif

	if (s < 0 || s >= phd_idx) {
		LogPrintf(FAC_H1TCP,
			LT_ALERT, "h1tcp_snd_send: s out of range (%d)", s);
		return -1;
	}
	phd = &p_h1tcp_data[s];

	/***
	 relikt: das telegramm wird auf geradzahlinge Anzahl Byte aufgefüllt
	         - sollte bei S7 nicht mehr benötigt werden!
	if (len % 2 != 0)
		++len;
	***/

	idx = 0;
	for(first=1; first || idx<len; first=0) {
		slen = len - idx;
		if ((slen+(int)sizeof(osi_data)) > phd->max_pdu)
			slen = phd->max_pdu - sizeof(osi_data);

		memset(&sbuf, 0, sizeof(sbuf));
		pod = (osi_data *)sbuf;
		pod->oh.version = H1TCP_VERS;
		pod->code = CODE_DT;
		pod->last = (slen+idx)>=len ? ISLAST : NOTLAST;

		pc = &pod->last + 1;
		if (slen > 0)
			memcpy(pc, &buf[idx], slen);
		pc += slen;
		idx += slen;
		/*
		 * Laengen
		 */
		slen = pc - sbuf;
		pod->oh.tpkt_len[0] = slen / 0x100;
		pod->oh.tpkt_len[1] = slen % 0x100;
		pod->oh.head_len = 2;	/* code + last */

		rv = h1tcp_snd_sock(phd, sbuf, slen);
		if (rv < 0)
			return rv;
	}
#ifdef __debug__log__
	LogPrintf(FAC_H1TCP, LT_DEBUG, "h1tcp_snd_send OK");
#endif
	return 0;
}


/* ------------------------------------------------------------
 * Telgramme empfangen
 */
#define NWORDS  howmany(FD_SETSIZE, NFDBITS)

static int
_h1tcp_rcv_sock(h1tcp_data *phd, u_char *buf, int max_len, int to)
{
	int				rv, s, len;
	fd_set	read_fds;
	struct timeval	tv;
#ifdef __rcv__log__
	char	*pc;
	char	trc_buf[3*BUFSZ + 50];
	int		i;
#endif

	s = phd->s;

	if (s < 0)
		return -1;

	memset(&read_fds, 0, sizeof(read_fds));

	FD_SET (s, &read_fds);

	tv.tv_usec = (to % 1000) * 1000;
	tv.tv_sec = to / 1000;

	rv = select(FD_SETSIZE, &read_fds, NULL, NULL, &tv);

	if (rv < 0)
		LogPrintf(FAC_H1TCP, LT_ALERT,
			"select s=%d errno=%d strerror=%s", s, errno, strerror(errno));
	if (rv <= 0)
		return rv;

	rv = recv(s, (char *)buf, max_len, 0);
	if (rv < 0 && errno == EAGAIN) {
		/* No Data */
		rv = 0;

	} else if (rv == 0) {
		/* Connectionproblem */
		rv = -1;
	} 

	if (rv < 0) {
		LogPrintf(FAC_H1TCP, LT_ALERT,
			"recv s=%d errno=%d strerror=%s", s, errno, strerror(errno));
		return rv;
	}
	len = rv;

#ifdef __rcv__log__
	pc = trc_buf;
	for(i=0; i<len; ++i) {
		if (i % 25 == 0)
			pc += sprintf(pc, "\n");
		pc += sprintf(pc, " %02x", buf[i]);
	}

	LogPrintf(FAC_H1TCP, LT_TRACE, "rcv_trace: %s", trc_buf);
#endif

	return len;
}


static int
h1tcp_rcv_sock(h1tcp_data *phd, u_char *buf, int max_len, int to)
{
	int				rv, len;
	osi_data		*pod;

	for(;;) {
		if (phd->frag_idx > 0) {
			pod = (osi_data *)phd->frag_buf;
			if (pod->oh.version != H1TCP_VERS) {
				LogPrintf(FAC_H1TCP, LT_ALERT,
					"h1tcp_rcv_sock: H1TCP_VERS invalid (%c)",
					pod->oh.version);
				return -1;
			}
			len = pod->oh.tpkt_len[0] * 0x100 + pod->oh.tpkt_len[1];
			if (len < (int)sizeof(osi_data) || len > MAX_PDU) {
				LogPrintf(FAC_H1TCP, LT_ALERT,
					"h1tcp_rcv_sock: len invalid (%d)", len);
				return -1;
			}

			if (phd->frag_idx >= len) {
				/*
				 * Block vollstaendig empfangen
				 */
				memcpy(buf, phd->frag_buf, len);
				phd->frag_idx -= len;
				if (phd->frag_idx > 0) {
					/*
					 * noch daten im frag_buf
					 */
					memcpy(&phd->frag_buf[0], &phd->frag_buf[len],
						phd->frag_idx);
				}
				return len;
			}
		}

		rv = _h1tcp_rcv_sock(phd, &phd->frag_buf[phd->frag_idx],
			BUFSZ-phd->frag_idx, to);
		if (rv < 0)
			return rv;
		/*
		 * Timeout im Telegramm
		 */
		if (rv == 0) {
			if (phd->frag_idx > 0) {
				LogPrintf(FAC_H1TCP, LT_ALERT,
					"h1tcp_rcv_sock: ZVZ timeout");
				return -1;
			}
			else {
				/* no data */
				return 0;
			}
		}
		phd->frag_idx += rv;
	}

#ifdef HPUX
	return -1;	/* to make cc happy */
#endif
}

int
h1tcp_rcv_send(int s, u_char *buf, int max_len, int to)
{
	int			rv, idx;
	int			len, offset;
	u_char		rbuf[BUFSZ];
	osi_data	*pod;
	h1tcp_data	*phd;

#ifdef __trace__log__
	LogPrintf(FAC_H1TCP, LT_TRACE,
		"h1tcp_rcv_send: s = %d, max_len = %d, to = %d ...", s, max_len, to);
#endif /* __trace__log__ */

	if (s < 0 || s >= phd_idx) {
		LogPrintf(FAC_H1TCP, LT_ALERT,
			"h1tcp_rcv_send: s out of range (%d)", s);
		return -1;
	}
	phd = &p_h1tcp_data[s];

	idx = 0;
	for(;;) {
		/*********** !!!!!!!!!! BLOCKVZ !!!!!!!!!!!!!! **********/
		rv = h1tcp_rcv_sock(phd, rbuf, BUFSZ, to);
		if (rv < 0)
			return rv;
		if (rv == 0) {
			if (idx > 0) {
				LogPrintf(FAC_H1TCP, LT_ALERT,
					"h1tcp_rcv_send: PDU timeout pdu_idx = %d", idx);
				return -1;
			}
			else {
#ifdef __trace__log__
				LogPrintf(FAC_H1TCP, LT_TRACE, "h1tcp_rcv_send TIMEOUT");
#endif /* __trace__log__ */
				return 0;
			}
		}
		len = rv;
		to = BLOCKVZTIME;
		/*
		 * Ueberlauf ?
		 */
		if ((len + idx) > max_len) {
			LogPrintf(FAC_H1TCP, LT_ALERT,
				"h1tcp_rcv_send: Buffer Overflow len = %d, max_len = %d",
				len + idx, max_len);
			return -1;
		}

		pod = (osi_data *)rbuf;
		offset = sizeof(osi_head) + pod->oh.head_len;
		if (offset > len) {
			LogPrintf(FAC_H1TCP, LT_ALERT,
				"h1tcp_rcv_send: Data Error data_offset > tel_len (%d > %d)",
				offset, len);
			return -1;
		}
		if (len > offset) {
			memcpy(&buf[idx], &rbuf[offset], len-offset);
			idx += (len-offset);
		}
		if ((pod->last & ISLAST) != 0) {
#ifdef __debug__log__
			LogPrintf(FAC_H1TCP, LT_DEBUG, "h1tcp_rcv_send OK  len = %d", idx);
#endif
			return idx;
		}
	}
}


/* ------------------------------------------------------------
 * TCP connect & disconnect
 */


int
h1tcp_shutdown(int s)
{
	int			rv;
	u_char		buf[BUFSZ];
	h1tcp_data	*phd;
	osi_conn	*poc;

	LogPrintf(FAC_H1TCP, LT_ALERT, "h1tcp_shutdown BEGIN s=%d", s);
	if (s < 0 || s >= phd_idx) {
		LogPrintf(FAC_H1TCP, LT_ALERT, "s out of range (%d)", s);
	}

	if (s >= 0 && s < phd_idx) {
		rv = shutdown(s, 0);
		if (rv < 0) {
			LogPrintf(FAC_H1TCP, LT_ALERT,
				"shutdown: errno=%d, strerror=%s",
				errno, strerror(errno));
		}else{

			phd = &p_h1tcp_data[s];

			memset(&buf, 0, sizeof(buf));
			poc = (osi_conn *)buf;
			poc->oh.version = H1TCP_VERS;
			poc->oh.tpkt_len[0] = sizeof(osi_conn) / 0x100;
			poc->oh.tpkt_len[1] = sizeof(osi_conn) % 0x100;
			poc->oh.head_len = sizeof(osi_conn) - sizeof(osi_head);
			poc->code = CODE_DR;
			poc->dst_ref[0] = DST_REF / 0x100;
			poc->dst_ref[1] = DST_REF % 0x100;
			poc->src_ref[0] = SRC_REF / 0x100;
			poc->src_ref[1] = SRC_REF % 0x100;
			poc->tp_class = 128;		/* normal disconnect */

			rv = h1tcp_snd_sock(phd, buf, sizeof(osi_conn));
		}
	}

	rv = close(s);

	if (rv < 0) {
		LogPrintf(FAC_H1TCP, LT_ALERT,
			"close: errno=%d, strerror=%s",
			errno, strerror(errno));
	}

	LogPrintf(FAC_H1TCP, LT_DEBUG, "h1tcp_shutdown FINISH");
	return 0;
}


/*----------------------------------------------------------------------------
-* SYNOPSIS
-*      $$ (automatically replaced with function prototype by autodoc-tool)
-* DESCRIPTION
-*		Phase 0 of H1TCP-Connecting: Open a TCP Socket and connect() it
-*		The connect() is done with NODELAY, so the connection is not
-*		really up
-* RETURNS
-*	OK:  socket handle
-*  ERR: -1
-*--------------------------------------------------------------------------*/
int _h1tcp_connect_phase0 (char *service, char *host)
{
	int					rv, s;
	int					val;
	struct hostent		*hp;		/* pointer to host info for remote host */
	struct servent		*sp;		/* pointer to service information */
	struct sockaddr_in	peeraddr_in;/* for peer socket address */
	h1tcp_data			*phd;

	LogPrintf(FAC_H1TCP, LT_ALERT,
		"Try TCP Connect to host='%s', service='%s'",
		host, service);
	/*
	 * clear out address structures
	 */
	memset ((char *)&peeraddr_in, 0, sizeof(struct sockaddr_in));

	/*
	 * Set up the peer address to which we will connect.
	 */
	peeraddr_in.sin_family = AF_INET;
	/*
	 * Get the host information for the hostname that the
	 * user passed in.
	 */
	hp = gethostbyname (host);
	if (hp == NULL) {
		LogPrintf(FAC_H1TCP, LT_ALERT,
			"%s not found in /etc/hosts", host);
		return -1;
	}

	peeraddr_in.sin_addr.s_addr = 
			((struct in_addr *)(void*)(hp->h_addr))->s_addr;

	LogPrintf (FAC_H1TCP, LT_ALERT, "IP: %s", inet_ntoa(peeraddr_in.sin_addr));
	/* Find the information for the "iso-tsap" server
	 * in order to get the needed port number.
	 */
	sp = getservbyname (service, "tcp");
	if (sp == NULL) {
		LogPrintf(FAC_H1TCP, LT_ALERT,
			"iso_tsap not found in /etc/services");
		return -1;
	}

#ifndef _WIN32
	peeraddr_in.sin_port = sp->s_port;
#else
	peeraddr_in.sin_port = sp->s_port;
	//peeraddr_in.sin_port = ntohs(sp->s_port); // change byte order of port
#endif // _WIN32

	/*
	 * Create the socket.
	 */
	s = socket (AF_INET, SOCK_STREAM, 0);
	if (s < 0) {
		LogPrintf(FAC_H1TCP, LT_ALERT,
			"socket() errno=%d strerror=%s",
			errno, strerror(errno));
		return s;
	}

	if (s >= phd_idx) {
		phd = (h1tcp_data*)realloc(p_h1tcp_data, ((s+1) * sizeof(h1tcp_data)));
		if (phd == NULL) {
			LogPrintf(FAC_H1TCP, LT_ALERT,
			"realloc: size=%u, errno=%d strerror=%s",
				((s+1) * sizeof(h1tcp_data)), errno, strerror(errno));
			return -1;
		}
		p_h1tcp_data = phd;
		phd_idx = s + 1;
	}
	phd = &p_h1tcp_data[s];
	memset(phd, 0, sizeof(h1tcp_data));
	phd->s = s;
	phd->peeraddr_in = peeraddr_in;

	val = BUFSZ * 10;
	rv = setsockopt(s, SOL_SOCKET, SO_SNDBUF, (const char*)&val, sizeof(val));
	if (rv < 0) {
		LogPrintf(FAC_H1TCP, LT_ALERT,
			"setsockopt O_SNDBUF: s=%d errno=%d strerror=%s",
			s, errno, strerror(errno));
		close(s);
		return -1;
	}

#ifdef __TCP_NODELAY__
	val = 1;
	rv = setsockopt(s, IPPROTO_TCP, TCP_NODELAY, (const char*)&val, sizeof(val));
	if (rv < 0) {
		LogPrintf(FAC_H1TCP, LT_ALERT,
			"setsockopt TCP_NODELAY: s=%d errno=%d strerror=%s",
			s,errno, strerror(errno));
		close(s);
		return -1;
	}
#endif

#ifndef _WIN32
	rv = fcntl(s, F_SETFL, O_NONBLOCK);
	if (rv < 0) {
		LogPrintf(FAC_H1TCP, LT_ALERT,
			"fcntl O_NONBLOCK:  s=%d errno=%d strerror=%s",
			s,errno, strerror(errno));
		close(s);
		return -1;
	}
#endif


	/*
	 * Try to connect to the remote server at the address
	 * which was just built into peeraddr.
	 */
	rv = connect(s,(struct sockaddr *)&peeraddr_in, sizeof(struct sockaddr_in));
	if (rv < 0) {
#ifdef _WIN32
		if (errno != WSAEINPROGRESS) {
#else
		if (errno != EINPROGRESS) {
#endif // _WIN32
			LogPrintf(FAC_H1TCP, LT_ALERT,
				"connect: s=%d errno=%d strerror=%s",
				s, errno, strerror(errno));
			close(s);
			return -1;
		}
	}

	LogPrintf(FAC_H1TCP, LT_ALERT,
		"socket ok to host='%s' service='%s' .. s=%d",
		host, service, s);

	return s;
}

/*----------------------------------------------------------------------------
-* SYNOPSIS
-*      $$ (automatically replaced with function prototype by autodoc-tool)
-* DESCRIPTION
-*		Phase 0a of H1TCP-Connecting: Check, if the connection of the
-*		given socket is ok
-* RETURNS
-*	1.. connection is up
-*  0.. not connected yet
-*  ERR: -1
-*--------------------------------------------------------------------------*/
int _h1tcp_connect_phase0a(int s)
{
	int			rv = 0;

	if (s < 0 || s >= phd_idx) {
		LogPrintf(FAC_H1TCP, LT_ALERT, "s out of range (%d)", s);
		return -1;
	}

#ifndef _WIN32
	h1tcp_data  *phd;
	phd = &p_h1tcp_data[s];

	LogPrintf(FAC_H1TCP, LT_ALERT, "connect socket...");
	rv = connect(s,(struct sockaddr *)&phd->peeraddr_in,
			sizeof(struct sockaddr_in));
	LogPrintf(FAC_H1TCP, LT_ALERT, "connect socket result %d", rv);
#endif // _WIN32

	if (rv < 0) {
#ifdef _WIN32
		if (errno != WSAEINPROGRESS || errno == WSAEALREADY) {
#else
		if (errno != EINPROGRESS || errno == EALREADY) {
#endif // _WIN32
			rv = 0;
#ifdef _WIN32
		}else if (errno == WSAEISCONN) {
#else
		}else if (errno == EISCONN) {
#endif // _WIN32
			rv = 1;
		}else{
			rv = -1;
		}
	}else{
		rv = 1;
	}


	if (rv == 1) {
		LogPrintf(FAC_H1TCP, LT_ALERT,
			"TCP connected successfully s=%d",s);
	} else if (rv == 0) {
		LogPrintf(FAC_H1TCP, LT_ALERT,
			"TCP connect in progress s=%d errno=%d strerror=%s",
				s,errno, strerror(errno));
	} else {
		LogPrintf(FAC_H1TCP, LT_ALERT,
			"TCP connection error s=%d errno=%d strerror=%s",
				s, errno, strerror(errno));
	}

	return rv;
}

/*----------------------------------------------------------------------------
-* SYNOPSIS
-*      $$ (automatically replaced with function prototype by autodoc-tool)
-* DESCRIPTION
-*		Phase 1 of H1TCP-Connecting: Build up H1TCP-Header and send
-*		the H1TCP-Connection Attempt 
-* RETURNS
-*	OK:  1
-*  ERR: -1
-*--------------------------------------------------------------------------*/
int _h1tcp_connect_phase1(int s, char *ltsap, char *rtsap)
{
	int			rv, len;
	u_char		*pc;
	u_char		buf[BUFSZ];
	osi_conn	*poc;
	h1tcp_data  *phd;

	if (s < 0 || s >= phd_idx) {
		LogPrintf(FAC_H1TCP, LT_ALERT, "s out of range (%d)", s);
		return -1;
	}
	phd = &p_h1tcp_data[s];

	LogPrintf(FAC_H1TCP, LT_DEBUG,
		"Try H1 Connection attempt s=%d ltsap=%s rtsap=%s",s, ltsap,rtsap);

	memset(&buf, 0, sizeof(buf));
	poc = (osi_conn *)buf;
	poc->oh.version = H1TCP_VERS;
	poc->code = CODE_CR;
	poc->dst_ref[0] = DST_REF / 0x100;
	poc->dst_ref[1] = DST_REF % 0x100;
	poc->src_ref[0] = SRC_REF / 0x100;
	poc->src_ref[1] = SRC_REF % 0x100;
	poc->tp_class = 0;
	pc = &poc->tp_class + 1;		/* offset connect data */

	*(pc++) = PARA_TPDU;
	*(pc++) = 1;				/* len */
	*(pc++) = POW_PDU;			/* 512 Bytes */

	*(pc++) = PARA_LTSAP;
	*(pc++) = strlen(ltsap);
	strcpy((char*)pc, ltsap);
	pc += strlen(ltsap);

	*(pc++) = PARA_RTSAP;
	*(pc++) = strlen(rtsap);
	strcpy((char*)pc, rtsap);
	pc += strlen(rtsap);

	/*
	 * Laengen
	 */
	len = pc - buf;
	poc->oh.tpkt_len[0] = len / 0x100;
	poc->oh.tpkt_len[1] = len % 0x100;
	poc->oh.head_len = len - sizeof(osi_head);

	rv = h1tcp_snd_sock(phd, buf, len);
	if (rv < 0)
		return rv;

	LogPrintf(FAC_H1TCP, LT_DEBUG, "sent H1 Connection attempt s=%d",s);
	
	return 1;
}

/*----------------------------------------------------------------------------
-* SYNOPSIS
-*      $$ (automatically replaced with function prototype by autodoc-tool)
-* DESCRIPTION
-*		Phase 2 of H1TCP-Connecting: Get Answer of H1TCP-partner and
-* 		check if returned H1-data (header) is ok
-* RETURNS
-*	OK:  1
-*	timeout: 0
-*  ERR: -1
-*--------------------------------------------------------------------------*/
int _h1tcp_connect_phase2(int s, int tTimeout)
{
	int			rv, len, i;
	u_char		buf[BUFSZ];
	osi_conn	*poc;
	h1tcp_data  *phd;

	if (s < 0 || s >= phd_idx) {
		LogPrintf(FAC_H1TCP, LT_ALERT, "s out of range (%d)", s);
		return -1;
	}
	phd = &p_h1tcp_data[s];

	memset(&buf, 0, sizeof(buf));
	poc = (osi_conn *)buf;
	
	rv = h1tcp_rcv_sock(phd, buf, sizeof(buf), tTimeout);
	if (rv < 0)
		return rv;

	if (rv == 0) {
		if (tTimeout > 0) {
			LogPrintf(FAC_H1TCP, LT_ALERT,
				"H1 Connection Confirm Timeout s=%d",s);
			return -1;
		}else{
			return 0;
		}
	}
	if (poc->code != CODE_CC) {
		LogPrintf(FAC_H1TCP, LT_ALERT,
			"H1TCP CODE != CODE_CC (%c != %d) s=%d", poc->code, CODE_CC,s);
		return -1;
	}
	len = poc->oh.tpkt_len[0] * 0x100 + poc->oh.tpkt_len[1];
	if (len < (int)sizeof(osi_conn)) {
		LogPrintf(FAC_H1TCP, LT_ALERT,
		"H1TCP Connection Confirm Telegamm to short (%d < %u) s=%d",
			len, sizeof(osi_conn),s);
		return -1;
	}
	for(i=offsetof(osi_conn, tp_class)+1; i<len; ) {
		switch (buf[i]) {
		case PARA_LTSAP:
		case PARA_RTSAP:
			break;
		case PARA_TPDU:
			/*
			 * pdu zwischen 16 und 65536
			 */
			if (buf[i+2] < 4 || buf[i+2] > 16) {
				LogPrintf(FAC_H1TCP, LT_ALERT,
				"H1TCP MAX_PDU invalid (%d) s=%d", (1 << buf[i+2]),s);
				return -1;
			}
			phd->max_pdu = (1 << buf[i+2]);
			LogPrintf(FAC_H1TCP, LT_DEBUG,
				"H1TCP MAX_PDU is %d s=%d", phd->max_pdu,s);
			break;
		default:
			return -1;
		}
		i += (buf[i+1] + 2);
	}
	if (phd->max_pdu == 0) {
		LogPrintf(FAC_H1TCP, LT_ALERT,
			"H1TCP Error: no MAX_PDU in Connection Confirm s=%d",s);
		return -1;
	}
	return 1;
}

